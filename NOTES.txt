GOALS
-----
1. SPA delivered via web static content
2. Calls to APIs not compromised under load
3. SPA uses OIDC Client security to validate all responses in a standard way
4. No refresh tokens in the browser, only short lived credentials

SPA
---
1. Put back custom memory storage and store contextual fields in local storage

2. Avoid sending refresh token to proxy - should be removed from message
   Also try to avoid hacks of the form refresh token = 'R'

3. Include client app name in a request header during auth code grant message

COOKIES
-------
1. Get expire cookie working

2. Validate client names before putting them in response cookies

3. Use encrypted cookies

4. Test for Cognito refresh tokens, which could affect cookie length

CLOUD
-----
1. Redeploy SPA to spa2

2. Lambda edge proxying of web.mycompany.com/proxy requests to OAuth API, resulting in not found

3. Implement the Serverless OAuth API as an HTTP API, with a single pipeline stage

4. Fix main Serverless API to use multiple pipeline stages, each with a single allowed CORS origin

5. Use a different SPA client id temporarily, and get rid of trailing backslash in redirect uri

6. Fix weird ReactJS logout effect of redirecting from #/loggedout to #loggedout to #/loggedout

FINALISE
--------
1. Remove Web Static Content from .Net Core APIs

2. Merge changes to master and redeploy main SPA

3. Test on Android and iOS browsers

4. Update blog instructions on how to run sample

HACKS SO FAR
------------
1. authenticator.initialise to update token endpoint

2. Overriding private method to send token refresh

3. Okta using a mobile client for an SPA