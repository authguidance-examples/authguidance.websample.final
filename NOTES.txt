GOALS
-----
1. SPA delivered directly via CDN without proxy in front
2. Calls to APIs not reverse proxied and compromised under load
3. SPA uses OIDC Client security to validate all responses in a standard way
4. Secure browser with no refresh tokens and in memory access / id tokens

SPA
---
1. Try monitor session

2. Refine local storage further - remove token items completely
   Restrict to just the needed protocol claims

3. Understand state storage better - in local storage
   Can I use session storage?

CLOUD
-----
1. Redeploy SPA to spa2
   Needs packager to use an spa2 folder

2. Lambda edge proxying of web.mycompany.com/proxy requests to OAuth API, resulting in not found

3. Implement the Serverless OAuth API as an HTTP API, with a single pipeline stage

4. Fix main Serverless API to use multiple pipeline stages, each with a single allowed CORS origin

5. Use a different SPA client id temporarily, and get rid of trailing backslash in redirect uri

6. Fix weird ReactJS logout effect of redirecting from #/loggedout to #loggedout to #/loggedout

SECURITY
--------
1. Use encrypted cookies

2. Use CSRF protection to token endpoint

FINALISE
--------
1. Remove Web Static Content from .Net Core APIs

2. Merge changes to master and redeploy main SPA

3. Test on Android and iOS browsers

4. Update blog instructions on how to run sample

HACKS SO FAR
------------
1. authenticator.initialise to update token endpoint - not too bad

2. Custom token storage - not too bad

3. Okta using a mobile client for an SPA - not too bad - Okta not up to date with OAuth 2.1